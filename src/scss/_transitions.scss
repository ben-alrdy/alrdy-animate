// Animations variables
@media screen {
  html:not(.no-js) {
    /**
    * Fade animations:
    * fade
    * fade-up, fade-down, fade-left, fade-right
    * fade-up-right, fade-up-left, fade-down-right, fade-down-left
    */

    [aa-animate^='fade'][aa-animate^='fade'] {
      opacity: 0;
      transition-property: opacity, transform;
      transition-duration: var(--aa-duration); 
      transition-delay: var(--aa-delay);       

      &.in-view {
        opacity: 1;
        transform: none;
      }
    }

    [aa-animate='fade-up'] {
      transform: translate3d(0, calc(50px * var(--aa-distance)), 0);
    }

    [aa-animate='fade-down'] {
      transform: translate3d(0, calc(-50px * var(--aa-distance)), 0);
    }

    [aa-animate='fade-right'] {
      transform: translate3d(calc(-50px * var(--aa-distance)), 0, 0);
    }

    [aa-animate='fade-left'] {
      transform: translate3d(calc(50px * var(--aa-distance)), 0, 0);
    }

    [aa-animate='fade-up-right'] {
      transform: translate3d(calc(-50px * var(--aa-distance)), calc(50px * var(--aa-distance)), 0);
    }

    [aa-animate='fade-up-left'] {
      transform: translate3d(calc(50px * var(--aa-distance)), calc(50px * var(--aa-distance)), 0);
    }

    [aa-animate='fade-down-right'] {
      transform: translate3d(calc(-50px * var(--aa-distance)), calc(-50px * var(--aa-distance)), 0);
    }

    [aa-animate='fade-down-left'] {
      transform: translate3d(calc(50px * var(--aa-distance)), calc(-50px * var(--aa-distance)), 0);
    }




    /**
    * Zoom animations:
    * zoom-in, zoom-in-up, zoom-in-down, zoom-in-left, zoom-in-right
    * zoom-out, zoom-out-up, zoom-out-down, zoom-out-left, zoom-out-right
    */

    [aa-animate^='zoom'][aa-animate^='zoom'] {
      opacity: 0;
      transition-property: opacity, transform;
      transition-duration: var(--aa-duration); 
      transition-delay: var(--aa-delay);  

      &.in-view {
        opacity: 1;
        transform: translate3d(0, 0, 0) scale(1);
      }
    }

    [aa-animate='zoom-in'] {
      transform: scale(.6);
    }

    [aa-animate='zoom-in-up'] {
      transform: translate3d(0, calc(50px * var(--aa-distance)), 0) scale(.6);
    }

    [aa-animate='zoom-in-down'] {
      transform: translate3d(0, calc(-50px * var(--aa-distance)), 0) scale(.6);
    }

    [aa-animate='zoom-in-right'] {
      transform: translate3d(calc(-50px * var(--aa-distance)), 0, 0) scale(.6);
    }

    [aa-animate='zoom-in-left'] {
      transform: translate3d(calc(50px * var(--aa-distance)), 0, 0) scale(.6);
    }

    [aa-animate='zoom-out'] {
      transform: scale(1.2);
    }

    [aa-animate='zoom-out-up'] {
      transform: translate3d(0, calc(50px * var(--aa-distance)), 0) scale(1.2);
    }

    [aa-animate='zoom-out-down'] {
      transform: translate3d(0, calc(-50px * var(--aa-distance)), 0) scale(1.2);
    }

    [aa-animate='zoom-out-right'] {
      transform: translate3d(calc(-50px * var(--aa-distance)), 0, 0) scale(1.2);
    }

    [aa-animate='zoom-out-left'] {
      transform: translate3d(calc(50px * var(--aa-distance)), 0, 0) scale(1.2);
    }




    /**
    * Slide animations
    */

    [aa-animate^='slide-'][aa-animate^='slide-'] {
      transition-property: transform;
      transition-duration: var(--aa-duration); 
      transition-delay: var(--aa-delay);  

      &.in-view {
        transform: translate3d(0, 0, 0);
      }
    }

    [aa-animate='slide-up'] {
      transform: translate3d(0, 100%, 0);
    }

    [aa-animate='slide-down'] {
      transform: translate3d(0, -100%, 0);
    }

    [aa-animate='slide-right'] {
      transform: translate3d(-100%, 0, 0);
    }

    [aa-animate='slide-left'] {
      transform: translate3d(100%, 0, 0);
    }




    /**
    * Flip animations:
    * flip-left, flip-right, flip-up, flip-down
    */

    [aa-animate^='flip'][aa-animate^='flip'] {
      backface-visibility: hidden;
      transition-property: transform;
      transition-duration: var(--aa-duration); 
      transition-delay: var(--aa-delay);  
    }

    [aa-animate='flip-left'] {
      transform: perspective(2500px) rotateY(-100deg);
      &.in-view {transform: perspective(2500px) rotateY(0);}
    }

    [aa-animate='flip-right'] {
      transform: perspective(2500px) rotateY(100deg);
      &.in-view {transform: perspective(2500px) rotateY(0);}
    }

    [aa-animate='flip-up'] {
      transform: perspective(2500px) rotateX(-100deg);
      &.in-view {transform: perspective(2500px) rotateX(0);}
    }

    [aa-animate='flip-down'] {
      transform: perspective(2500px) rotateX(100deg);
      &.in-view {transform: perspective(2500px) rotateX(0);}
    }


    /*
    PSEUDO BACKGROUND REVEAL TRANSITIONS
    */

    [aa-animate^="pseudo-reveal"][aa-animate^="pseudo-reveal"] {
      position: relative;
      background: var(--aa-bg-color-final);
      overflow: hidden;
    }

    [aa-animate^="pseudo-reveal"][aa-animate^="pseudo-reveal"] > * {
      position: relative;
      z-index: 1;
    }

    [aa-animate^="pseudo-reveal"]::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--aa-bg-color-initial);
      z-index: 2;
      transition: transform var(--aa-duration) var(--aa-delay);
    }

    [aa-animate^="pseudo-reveal"]::before {
      transform: translate3d(0, 0, 0);
    }

    [aa-animate="pseudo-reveal-up"]::before {
      transform-origin: top;
      transform: scaleY(1);
    }
    [aa-animate="pseudo-reveal-up"].in-view::before {
      transform: scaleY(0);
    }

    [aa-animate="pseudo-reveal-down"]::before {
      transform-origin: bottom;
      transform: scaleY(1);
    }
    [aa-animate="pseudo-reveal-down"].in-view::before {
      transform: scaleY(0);
    }

    [aa-animate="pseudo-reveal-right"]::before {
      transform-origin: right;
      transform: scaleX(1);
    }
    [aa-animate="pseudo-reveal-right"].in-view::before {
      transform: scaleX(0);
    }

    [aa-animate="pseudo-reveal-left"]::before {
      transform-origin: left;
      transform: scaleX(1);
    }
    [aa-animate="pseudo-reveal-left"].in-view::before {
      transform: scaleX(0);
    }



    /*
    HOVER TRANSITIONS 
    */

    // Helper maps
    $scale-values: (
      'grow': calc(1.08 * var(--aa-distance)),
      'shrink': calc(0.92 * var(--aa-distance))
    );

    $translations: (
      'up': translateY(calc(-1rem * var(--aa-distance))),
      'down': translateY(calc(1rem * var(--aa-distance))),
      'left': translateX(calc(-1rem * var(--aa-distance))),
      'right': translateX(calc(1rem * var(--aa-distance)))
    );

    $hover-rotation-degrees: (5, 15, 360, 720);

    // Base transition
    [aa-hover] {
      transition-property: transform;
      transition-duration: var(--aa-duration);
      transition-delay: var(--aa-delay);
    }

    // Generate all combinations
    @each $scale-name, $scale-value in $scale-values {
      // Scale only
      [aa-hover="#{$scale-name}"]:hover {
        transform: scale($scale-value);
      }
      
      // Scale + rotate-0
      [aa-hover="#{$scale-name}-0"]:hover {
        transform: rotate(0deg) scale($scale-value);
      }
      
      // Scale + rotate with direction
      @each $degree in $hover-rotation-degrees {
        [aa-hover="#{$scale-name}-cw-#{$degree}"]:hover {
          transform: rotate(#{$degree}deg) scale($scale-value);
        }
        [aa-hover="#{$scale-name}-ccw-#{$degree}"]:hover {
          transform: rotate(-#{$degree}deg) scale($scale-value);
        }
      }

      // Scale + slide + rotate-0
      @each $slide-name, $translate in $translations {
        [aa-hover="#{$scale-name}-#{$slide-name}-0"]:hover {
          transform: rotate(0deg) $translate scale($scale-value);
        }
      }

      // Scale + slide + rotate with direction
      @each $slide-name, $translate in $translations {
        @each $degree in $hover-rotation-degrees {
          [aa-hover="#{$scale-name}-#{$slide-name}-cw-#{$degree}"]:hover {
            transform: rotate(#{$degree}deg) $translate scale($scale-value);
          }
          [aa-hover="#{$scale-name}-#{$slide-name}-ccw-#{$degree}"]:hover {
            transform: rotate(-#{$degree}deg) $translate scale($scale-value);
          }
        }
      }

      // Scale + slide (without rotation)
      @each $slide-name, $translate in $translations {
        [aa-hover="#{$scale-name}-#{$slide-name}"]:hover {
          transform: $translate scale($scale-value);
        }
      }
    }

    // Slide only
    @each $slide-name, $translate in $translations {
      [aa-hover="#{$slide-name}"]:hover {
        transform: $translate;
      }
      
      // Slide + rotate-0
      [aa-hover="#{$slide-name}-0"]:hover {
        transform: rotate(0deg) $translate;
      }
      
      // Slide + rotate with direction
      @each $degree in $hover-rotation-degrees {
        [aa-hover="#{$slide-name}-cw-#{$degree}"]:hover {
          transform: rotate(#{$degree}deg) $translate;
        }
        [aa-hover="#{$slide-name}-ccw-#{$degree}"]:hover {
          transform: rotate(-#{$degree}deg) $translate;
        }
      }
    }

    // Rotate only
    [aa-hover="rotate-0"]:hover {
      transform: rotate(0deg);
    }

    @each $degree in $hover-rotation-degrees {
      [aa-hover="rotate-cw-#{$degree}"]:hover {
        transform: rotate(#{$degree}deg);
      }
      [aa-hover="rotate-ccw-#{$degree}"]:hover {
        transform: rotate(-#{$degree}deg);
      }
    }

    
    
    

  }
}
